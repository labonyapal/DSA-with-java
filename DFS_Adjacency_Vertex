// finding adjacency vertex of a given veter (1 base indexing)



import java.util.*;
public class Main {
    public static void dfsrec(ArrayList<ArrayList<Integer>> adj, boolean[] visited, int s, ArrayList<Integer> res)
    {
        visited[s]=true;
        res.add(s);
        
        for(int i : adj.get(s))
        {
            if(!visited[i]){
                dfsrec(adj, visited, i, res);
            }
        }
    }
    
    public static ArrayList<Integer> DFS(ArrayList<ArrayList<Integer>> adj){
        boolean[] visited = new boolean[adj.size()+1];
        ArrayList <Integer> res = new ArrayList<>();
         for (int i = 1; i < adj.size(); i++) {
            if (!visited[i]) {
                dfsrec(adj, visited, i, res);
            }
        }
        return res;
    }
    
    public static void addEdge(ArrayList<ArrayList<Integer>> adj, int s, int d){
        adj.get(s).add(d);
        adj.get(d).add(s);
    }
    
    public static void main(String[] args) {
      
        int v, e;
        Scanner sc = new Scanner(System.in);
        v = sc.nextInt();
        e = sc.nextInt();
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0; i<=v; i++){
            adj.add(new ArrayList<Integer>() );
        }
        int s, t;
        for(int i=0; i<e; i++)
        {
            s=sc.nextInt();
            t=sc.nextInt();
            addEdge(adj,s, t );
        }
        ArrayList<Integer> halum = DFS(adj);
        
        for(int i=0; i<halum.size(); i++)
        {
            System.out.print(halum.get(i)+ " ");
        }
        int x;
        x=sc.nextInt();
        System.out.println();
        for(int i : adj.get(x)){
            System.out.print(i+" ");
        }
// cod efor printing adjacency list
 System.out.println();
        for(int j=1; j<adj.size(); j++){
              System.out.print("adjecancy list for " + j +" : ");
        for(int i : adj.get(j)){
          
            System.out.print(i+" ");
        }
        System.out.println();
        }
    }
}

