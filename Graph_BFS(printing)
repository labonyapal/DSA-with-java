import java.util.*;

public class Main {
    // Function for BFS traversal
    public static ArrayList<Integer> BFS(ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[adj.size() + 1];  // To track visited nodes
        ArrayList<Integer> res = new ArrayList<>();  // To store the result of BFS traversal

        Queue<Integer> queue = new LinkedList<>();  // Queue for BFS

        for (int i = 1; i < adj.size(); i++) {
            if (!visited[i]) {
                // Start BFS from each unvisited node
                queue.add(i);
                visited[i] = true;
                
                while (!queue.isEmpty()) {
                    int node = queue.poll();  // Get the node at the front of the queue
                    res.add(node);  // Add node to result
                    
                    // Explore all the adjacent nodes
                    for (int neighbor : adj.get(node)) {
                        if (!visited[neighbor]) {
                            visited[neighbor] = true;
                            queue.add(neighbor);
                        }
                    }
                }
            }
        }
        return res;
    }

    // Function to add an edge to the graph
    public static void addEdge(ArrayList<ArrayList<Integer>> adj, int s, int d) {
        adj.get(s).add(d);
        adj.get(d).add(s);
    }

    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
        
        // Read the number of vertices and edges
        int v, e;
        Scanner sc = new Scanner(System.in);
        v = sc.nextInt();
        e = sc.nextInt();

        // Create the adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= v; i++) {
            adj.add(new ArrayList<Integer>());
        }

        // Add edges to the graph
        int s, t;
        for (int i = 0; i < e; i++) {
            s = sc.nextInt();
            t = sc.nextInt();
            addEdge(adj, s, t);
        }

        // Perform BFS and store the result
        ArrayList<Integer> halum = BFS(adj);

        // Print the result of BFS traversal
        for (int i = 0; i < halum.size(); i++) {
            System.out.print(halum.get(i) + " ");
        }
    }
}
