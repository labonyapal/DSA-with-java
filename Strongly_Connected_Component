import java.util.*;

public class Main {

    public static boolean dfs(int curr, int des, ArrayList<ArrayList<Integer>> adj, int[] vis) {
        if (curr == des) return true;
        vis[curr] = 1;

        for (int next : adj.get(curr)) {
            if (vis[next] == 0) {
                if (dfs(next, des, adj, vis)) return true;
            }
        }
        return false;
    }

    public static boolean isPath(int src, int dest, ArrayList<ArrayList<Integer>> adj, int n) {
        int[] vis = new int[n + 1];
        return dfs(src, dest, adj, vis);
    }

    public static ArrayList<ArrayList<Integer>> findSCC(int n, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        int[] is_scc = new int[n + 1];

        for (int i = 1; i <= n; i++) {
            if (is_scc[i] == 0) {
                ArrayList<Integer> scc = new ArrayList<>();
                scc.add(i);

                for (int j = i + 1; j <= n; j++) {
                    if (is_scc[j] == 0 && isPath(i, j, adj, n) && isPath(j, i, adj, n)) {
                        is_scc[j] = 1;
                        scc.add(j);
                    }
                }

                for (int node : scc) {
                    is_scc[node] = 1;
                }

                ans.add(scc);
            }
        }
        return ans;
    }

    public static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v) {
        adj.get(u).add(v);  // Directed edge
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt(); // vertices
        int e = sc.nextInt(); // edges

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= v; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < e; i++) {
            int u = sc.nextInt();
            int w = sc.nextInt();
            addEdge(adj, u, w);
        }

        ArrayList<ArrayList<Integer>> result = findSCC(v, adj);

        System.out.println("Strongly Connected Components:");
int pak=0;
        for (ArrayList<Integer> component : result) {
            Collections.sort(component); // optional: to sort inside component
            for (int node : component) {
                System.out.print(node + " ");
pak++;
            }
            System.out.println();
           System.out.println("number of strongly connected component " + pak);
        }
    }
}
