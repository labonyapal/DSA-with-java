import java.util.*;

public class Main {

    public static void addEdge(ArrayList<ArrayList<Integer>> adj, int s, int d){
        adj.get(s).add(d);
        adj.get(d).add(s);
    }

    public static void bfsShortestPaths(ArrayList<ArrayList<Integer>> adj, int start, int v) {
        int[] distance = new int[v + 1];
        Arrays.fill(distance, -1);  // -1 means unreachable

        Queue<Integer> queue = new LinkedList<>();
        distance[start] = 0;
        queue.offer(start);

        while (!queue.isEmpty()) {
            int current = queue.poll();

            for (int neighbor : adj.get(current)) {
                if (distance[neighbor] == -1) {
                    distance[neighbor] = distance[current] + 1;
                    queue.offer(neighbor);
                }
            }
        }

        // Print the shortest distance to all vertices
        System.out.println("Shortest distance from vertex " + start + ":");
        for (int i = 1; i <= v; i++) {
            System.out.println("Vertex " + i + ": " + distance[i]);
        }
    }

    public static void main(String[] args) {
        int v, e;
        Scanner sc = new Scanner(System.in);
        v = sc.nextInt(); // Number of vertices
        e = sc.nextInt(); // Number of edges

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= v; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < e; i++) {
            int s = sc.nextInt();
            int t = sc.nextInt();
            addEdge(adj, s, t);
        }

        // Sort adjacency lists to ensure lexicographic traversal (optional)
        for (int i = 0; i <= v; i++) {
            Collections.sort(adj.get(i));
        }
